OVERVIEW
====================================================================================================================

SurfSuite is a suite of Fortran routines to handle the particle data (positions and velocities) in large cosmological
simulations, especially the SURFS simulations produced at ICRAR. In particular, the routines allow the user to
(1) sort and quickly retrieve particles from single or multiple snapshot files produced by Gadget-2
(2) rearrage and quickly retrieve/show/analyse all particles in a specific halo identified by VELOCIraptor

V0.5  01/03/2017: First release
V0.6  18/04/2017: Update, better compatibility with pleiades
v0.7  13/02/2019: Significant updates, inclusion of HDF5 module, new showing routine
v0.8  18/06/2019: Updated compiler flags, documentation, various fixes
v0.9  15/10/2019: Added HDF5 outputs
v0.10 15/11/2019: General clean up, improved gethalo routine
v0.11 11/02/2019: improved description, cluster optimizations
v0.12 21/02/2019: updated parameter files
v0.13 23/02/2019: various fixes and clean ups
v0.14 24/02/2019: more graphical parameters for showhalo, updated documentation
v0.15 24/02/2019: added some file existence checks
v0.16 25/02/2019: minor fixes

Copyright Danail Obreschkow (danail.obreschkow@icrar.org)


QUICK START ON A GENERIC MACHINE
====================================================================================================================

1) Install gfortran (tested for versions 4.7, 4.8 and 5.0).
2) In a terminal, download surfsuite
   > git clone https://github.com/obreschkow/surfsuite
3) Got to surfsuite directory
   > cd surfsuite
4) Modify makefile as needed (e.g. update library paths) and compile the code
   > make
5) Run test code by typing:
   > ./surfsuite version
6) Edit the file parameters.txt to point to the correct paths and files
7) Sort GADGET files and use Velociraptor outputs to write particles into halo files:
   > ./surfsuite makeall
8) Test extracting the information of a single particle
   > ./surfsuite getparticle 1
9) Test extracting the information of a single group
   > ./surfsuite gethalo 1
10) Test showing a halo
   > ./surfsuite showhalo 1


QUICK START ON ICRAR-HYADES
====================================================================================================================

# setup
rm -rf surfsuite/ # remove previous surfsuite directory
git clone https://github.com/obreschkow/surfsuite # install updated version
cd surfsuite # change to surfsuite directory
module load gfortran/6.3.0 hdf5/1.10.2 # load required modules
make system=hyades # compile code
./surfsuite version # check version

# extract particle information for particle number 134 in the L210_N1024 run of SURFS
# note: it may be necessary to specify the parameter file location using the option "-parameterfile"
./surfsuite getparticle 134 -simulation L210_N1024-Hydro6D-hyades

# extract halo information for halo number 56 in the L210_N1024 run of SURFS
./surfsuite gethalo 56 -simulation L210_N1024-Hydro6D-hyades

# to run a larger job, use SLURM


ARGUMENTS
====================================================================================================================

Generally, SurfSuite is called as
> ./surfsuite task [task_argument] [-option argument] [-option argument] ...

The tasks to choose from are

+ version: returns the version of SurfSuite

+ simulation: returns basic properties of the Gadget simulation

+ sortparticles: sorts particles by ID into files of maximun size of 3.6 GB

+ makehalos: generates binary files, sequentially listing the particles of all halos with
  species-indices, 3D-positions and 3D-velocities (see file formats below)
  This uses the halo information from VELOCIraptor

+ makeall: runs 'sortparticles' and 'makehalos'

+ getparticle #particleID: returns species, position and velocity of the specified particle

+ gethalo #haloID: returns basic properties of the specified halo. Optional arguments:
  -outputfile: name of a file in which the particles of this halo are saved; if specified the screen output is suppressed
  -outputformat (default 1): only used if -outputfile given. 1 = hdf5, 2 = ascii, 3 = binary
  -subhalos (default 0): 0 = do not show particles in subhalos, 1 = included particles in all generations of subhalos
  -center (default 0): only used if -outputfile given. If set to 1, particle positions and velocities are
   centered to the geometric center (=centre of mass if all species have identical masses)
   
+ showhalo #haloID: displays or saves a bitmap-image of the halo
  -outputfile: name of a file in which the image is saved as bitmap (choose *.bmp); if specified the screen output is suppressed
  -subhalos (default 0): 0 = do not show particles in subhalos, 1 = included particles in all generations of subhalos
  -mode (default 0): 0 = render particles as points, 1 = show particles as smoothed points, 2 = show small trajectories
  -npixels (default 800): number of pixels per dimension
  -sidelength (default 2): sidelength of the displayed images in simulation units
  -smoothinglength (default 0.2): smoothing length of the displayed images in simulation units; only used if mode=1
  -lum (default 1): luminosity scaling factor
  -gamma (default 0.6): gamma correction value for non-linear brightness scale
  -projection (default 1): specifies the orthogonal projection, 1 = (x,y), 2 = (y,z), 3 = (z,x)


Optional arguments used by all routines

-parameterfile (default parameters.txt): path+filename of parameter-file

-simulation (default set in parameter-file): specify the simulation name in the parameterfile

-snapshot (default set in parameter-file): overwrites the 'snapshot' string given in parameters.txt to allow
 a quick access to a different snapshot, keeping all the other parameters identical

-logfile (default none) allows the user to specify a path+filename for the screen-log, which is particularly usefull
 if the code is executed using a queueing system


FILE FORMATS
====================================================================================================================

Gadget-2 snapshots must be stored in one or multiple binary files "snapshot_###[.#]". Their format is the standard
sequential binary format of Gadget-2 (for n particles):
- Header (256 bytes)
- Positions (n * 3 * real*4)
- Velocities (n * 3 * real*4)
- IDs (n * integer*4 or n * integer*8)
- [additional properties, which will be ignored]

Particle files produced by 'sortparticles', 'makehalos', 'gethalo' are as binary streams of exactly n*36 bytes
- id(1),species(1),x(1),y(1),z(1),vx(1),vy(1),vz(1)
...
- id(n),species(n),x(n),y(n),z(n),vx(n),vy(n),vz(n)
where id(i) is an 8-byte integer, species(i) is a 4-byte integer and the other 6 variables are 4-byte reals.
The routine 'gethalo' can also write these files in ascii-format (-outputformat 2).

The halo list produced by 'makehalos' is a binary stream of exactly nhalos*16 bytes, made of four integer*4 values
giving, for each halo: the file index, position of first_particle, number of particles, parent halo ID.
A parent halo ID of -1 is used for 1st generation halos.


PACKAGED FILES
====================================================================================================================

+ 'README' = this file
+ 'surfsuite.f95' main program
+ 'module_xxx.f95' various modules with subroutines
+ 'parameters.txt' example parameter file
+ 'makefile' contains the compiling instructions for the gfortran compiler.